apply plugin: 'maven-publish'
apply plugin: 'signing'

/*
ext {
    pomVersion = lib_version
    pomGroupId = '*'
    // pomArtifactId, pomArtifactName, pomArtifactDescription

    pomSiteUrl = '*'
    pomGitUrl = '*.git'

    pomLicenses = {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    pomDevelopers = {
        developer {
            id '*'
            name '*'
            email '*'
            // organization, organizationUrl
        }
    }
}
apply from: 'publishing.gradle'
$ gradle uploadArchives
*/

//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    archiveClassifier.set('sources')
//}
//
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    failOnError false
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    archiveClassifier.set('javadoc')
//    from javadoc.destinationDir
//}
//
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}

def localProperties = new Properties()
def localFile = rootProject.file("local.properties")
if (localFile.exists()) {
    localProperties.load(localFile.newDataInputStream())
}

def props = { propName, defaultValue = "" ->
    def local = localProperties.containsKey(propName)

    if (local) return localProperties.getProperty(propName)
    else return System.getenv(propName) ?: defaultValue
}

gradle.taskGraph.whenReady { taskGraph ->
    ext["signing.keyId"] = props("signing.keyId")
    ext["signing.password"] = props("signing.password")
    ext["signing.secretKeyRingFile"] = props("signing.secretKeyRingFile")
}

afterEvaluate {
    publishing {
        publications {
//            println "Project: $project.path"
//            println "Username: $username"
//            println "Repo URL: $repositoryUrl"

            release(MavenPublication) {
                from components.release

                groupId = pomGroupId
                artifactId = pomArtifactId
                version = pomVersion
                //beforeDeployment { deployment -> signing.signPom(deployment) }
                pom {
                    //packaging.set('aar')

                    name.set(pomArtifactName)
                    description.set(pomArtifactDescription)
                    url.set(pomSiteUrl)

                    licenses(pomLicenses)
                    developers(pomDevelopers)

                    scm {
                        connection.set(pomGitUrl)
                        developerConnection.set(pomGitUrl)
                        url.set(pomSiteUrl)
                    }
                }
            }
        }
        // Authentication
        def username = props("nexus.username")
        def password = props("nexus.password")
        def repositoryUrl = props("nexus.repository")
        if (!repositoryUrl.isEmpty()) {
            maven {
                url = uri(repositoryUrl)
                credentials {
                    username username
                    password password
                }
            }
        }
    }

    signing {
        required { !props("nexus.repository").isEmpty() }
        sign publishing.publications.release
    }
}
